
//floyd algorithm

#include<iostream>
using namespace std;

Node* floydDetectLoop(Node* head){
    
    if(head== NULL) return NULL;
    
    Node* slow = head;
    Node* fast = head;

    while(fast->!=NULL && fast!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        
        if(slow==fast)
        return slow;
    }    
    return NULL;
    
} 


Node* getStartNode(Node* head){
    if(head==NULL) return NULL;
    
    Node* intersection = floydDetectLoop(head);
    Node* slow=head;
    while(slow!=intersection){
        slow=slow->next;
        intersection=intersection->next;
    }
    return slow;
}


int removeLoop(Node* head){
    if(head==NULL) return ;
    
    Node* startOfLoop = getStartNode(head);
    Node* temp = startOfLoop;
    
    while(temp->next!=startOfLoop){
        temp=temp->next;
        
    }
    
    temp->next=NULL;
}